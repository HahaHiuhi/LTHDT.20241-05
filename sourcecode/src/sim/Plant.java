package sim;

public class Plant extends Organism {
    private final int energyProducedPerTick = 20; // NÄƒng lÆ°á»£ng sáº£n xuáº¥t má»—i láº§n cáº­p nháº­t (tick)
    private final int birthRate = 2; // Tá»· lá»‡ sinh sáº£n (sá»‘ lÆ°á»£ng cÃ¢y con má»—i láº§n sinh sáº£n)

    // Constructor
    public Plant(int energy, int posX, int posY, World world) {
        super(energy, posX, posY, world); // CÃ¢y khÃ´ng di chuyá»ƒn nÃªn tá»‘c Ä‘á»™ = 0
 
    }

    // PhÆ°Æ¡ng thá»©c sáº£n xuáº¥t nÄƒng lÆ°á»£ng qua quang há»£p
    public void produceEnergy() {
        this.energy += energyProducedPerTick; // TÄƒng nÄƒng lÆ°á»£ng má»—i tick
    }



    // Getters and Setters
    public float getEnergyProducedPerTick() {
        return energyProducedPerTick;
    }

    public int getBirthRate() {
        return birthRate;
    }

  
    
    @Override 
    public void reproduce() {
    	 if (energy > 150  && world.getOrganisms().size() < CAP) {  // Náº¿u nÄƒng lÆ°á»£ng Ä‘á»§, sinh sáº£n
    		 for (int i = 0; i < birthRate; ++i) {
             world.getOrganisms().add(new Plant(this.posX, this.posY, 100, world));  // Táº¡o má»™t Ä‘á»™ng váº­t Äƒn thá»‹t má»›i vá»›i nÄƒng lÆ°á»£ng ban Ä‘áº§u
             energy -= 10;  // Trá»« nÄƒng lÆ°á»£ng cá»§a Ä‘á»™ng váº­t máº¹ khi sinh sáº£n
         }
         }
    }
    @Override 
    public synchronized void update() {
    	if (isDead()) {
            this.die();  // Ensure dead organisms don't continue with actions like hunting or reproducing
            return;
        }
    	this.produceEnergy();
    	this.reproduce();
    	
    }
    @Override
    public String getEmoji() {
        return "ðŸŒ±"; // Example emoji for plant
    }
}
